// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String?   // Made optional to support OAuth users
  name          String?
  image         String?   // Added for OAuth profile images
  emailVerified DateTime? @map("email_verified")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  performance   UserKanaPerformance[]
  accounts      Account[] // Added for OAuth
  sessions      Session[] // Added for session management

  @@map("users")
}

// Added for OAuth account linking
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Added for session management
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Added for email verification (optional)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Flashcard {
  id        Int           @id @default(autoincrement())
  kana      String
  romaji    String
  type      KanaType
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([kana, type], name: "kana_type")
  @@map("flashcards")
}

model UserKanaPerformance {
  id            Int       @id @default(autoincrement())
  userId        String    @map("user_id")
  kana          String
  kanaType      String    @map("kana_type")
  correctCount  Int       @default(0) @map("correct_count")
  totalCount    Int       @default(0) @map("total_count")
  lastPracticed DateTime  @default(now()) @map("last_practiced")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, kana])
  @@map("user_kana_performance")
}

enum KanaType {
  hiragana
  katakana
}